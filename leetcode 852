852. Peak Index in a Mountain Array
Let's call an array A a mountain if the following properties hold:  A.length >= 3 There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1] Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1].

#1 simply just scan whole list
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        i = 1
        while i< len(A):
            if A[i]<A[i+1]:
                i+=1
            else:
                break
        return i


#2 binary search
class Solution:
    def peakIndexInMountainArray(self, A: List[int]) -> int:
        i = 0
        j=len(A)
        mid = (i+j)//2
        while i<=j:
            if A[mid-1]< A[mid] and A [mid] > A[mid+1]:
                return mid
            if A[mid]< A[mid+1]:
                i = mid+1
                mid = (i+j)//2
            if A[mid] < A[mid-1]:
                j = mid-1
                mid = (i+j)//2
