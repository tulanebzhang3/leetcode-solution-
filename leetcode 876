876. Middle of the Linked List
Given a non-empty, singly linked list with head node head, return a middle node of linked list.  
If there are two middle nodes, return the second middle node.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

#1 just count the number of list
class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        count = 0
        cur = head
        while cur!= None:
            count+=1
            cur=cur.next
        middle = count//2
        middle_node = head
        for i in range (middle):
            middle_node = middle_node.next
        return middle_node

#2 use a list to append all node, return len(A)/2
class Solution:
    def middleNode(self, head: ListNode) -> ListNode:
        A = [head]
        cur = head.next
        while cur:
            A.append(cur)
            cur= cur.next
        return A[len(A)//2]

#3 very smart version
class Solution(object):
    def middleNode(self, head):
        slow = fast = head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        return slow
